name: "Entra: Configure Entra ID Password Expiration Policies"

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_ENVIRONMENT: ${{ vars.TF_BACKEND_CONFIG_ENVIRONMENT }}
  ARM_SUBSCRIPTION_ID: ${{ vars.TFSTATE_AZURE_SUBSCRIPTION_ID }}
  IS_AZURE_GOV: ${{ vars.IS_AZURE_GOV }}
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  PASSWORD_EXPIRATION_PERIOD: ${{ vars.PASSWORD_EXPIRATION_PERIOD }}
  EXECUTE_CHANGE: ${{ vars.EXECUTE_CHANGE }}
  DEPLOY_ENVIRONMENT: ${{ vars.DEPLOY_ENVIRONMENT }} # Use this variable for the environment

jobs:
  run-powershell-script:
    environment: $env.DEPLOY_ENVIRONMENT # Use the environment variable here
    name: "Organization-wide Password Expiration Policy"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PasswordPolicy module
        uses: actions/checkout@v4
        with:
          repository: 'Sensini7/Azure-User-Password-Policy'
          ref: 'Sensini/OrgPassPolicy'
          path: 'EZD.ECI.EntraUserPasswordExpiration'
          sparse-checkout: 'EZD.ECI.PassPolicy'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      - name: Checkout common module
        uses: actions/checkout@v4
        with:
          repository: 'Sensini7/Azure-User-Password-Policy'
          ref: 'Sensini/OrgPassPolicy'
          path: 'EZD.ECI.Common'
          sparse-checkout: 'EZD.ECI.Common'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      - name: Configure Entra ID Password Expiration Settings
        shell: pwsh
        run: |
          if ($env:IS_AZURE_GOV -eq "true") {
            az cloud set --name AzureUSGovernment
            $GRAPH_ENVIRONMENT = 'USGov'
          } else {
            $GRAPH_ENVIRONMENT = 'Global'
          }
          az login --service-principal -u $env:AZURE_CLIENT_ID -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant $env:AZURE_TENANT_ID
          $AccessToken = (az account get-access-token --resource-type ms-graph | ConvertFrom-Json).accessToken

          Write-Output "Connecting to MgGraph..."
          $SecureAccessToken = ConvertTo-SecureString -String $AccessToken -AsPlainText -Force
          Connect-MgGraph -AccessToken $SecureAccessToken -NoWelcome -Environment $GRAPH_ENVIRONMENT

          Write-Output "Installing Microsoft Graph Identity Directory Management Module"
          if (-Not (Get-InstalledModule -Name "Microsoft.Graph.Identity.DirectoryManagement" -ErrorAction SilentlyContinue)) {
            Write-Output "Installing Microsoft.Graph.Identity.DirectoryManagement module..."
            Install-Module -Name "Microsoft.Graph.Identity.DirectoryManagement" -Scope CurrentUser -Force
          }

          if (-Not (Get-InstalledModule -Name "Microsoft.Graph.Identity.DirectoryManagement" -ErrorAction SilentlyContinue)) {
            Write-Error "Microsoft.Graph.Identity.DirectoryManagement module is not installed. Please install it before running this workflow."
            exit 1
          }

          Write-Output "Importing Graph Module"
          Import-Module -Name "Microsoft.Graph.Identity.DirectoryManagement" -Force

          Write-Output "Importing Password Expiration Policy And Common Modules"
          Import-Module .\EZD.ECI.Common\EZD.ECI.Common\EZD.ECI.Common.psm1 -Force
          Import-Module .\EZD.ECI.EntraUserPasswordExpiration\EZD.ECI.PassPolicy\EZD.ECI.EntraIdUserPasswordPolicyConfig.psm1 -Force

          Write-Output "Configuring Password Expiration Settings"
          Set-DomainPasswordPolicy